// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: districts.sql

package db

import (
	"context"
)

const getDistrict = `-- name: GetDistrict :one
SELECT id, city_id, name, created_at
FROM districts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetDistrict(ctx context.Context, id int64) (District, error) {
	row := q.db.QueryRowContext(ctx, getDistrict, id)
	var i District
	err := row.Scan(
		&i.ID,
		&i.CityID,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const listDistricts = `-- name: ListDistricts :many
SELECT id, city_id, name, created_at
FROM districts
WHERE city_id = $1
ORDER BY id
`

func (q *Queries) ListDistricts(ctx context.Context, cityID int64) ([]District, error) {
	rows, err := q.db.QueryContext(ctx, listDistricts, cityID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []District{}
	for rows.Next() {
		var i District
		if err := rows.Scan(
			&i.ID,
			&i.CityID,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
