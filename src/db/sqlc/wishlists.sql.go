// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: wishlists.sql

package db

import (
	"context"
)

const createWishlist = `-- name: CreateWishlist :one
INSERT INTO wishlists (
  books_id,
  username
) VALUES (
  $1, $2
)
RETURNING id, books_id, username, created_at
`

type CreateWishlistParams struct {
	BooksID  int64  `json:"books_id"`
	Username string `json:"username"`
}

func (q *Queries) CreateWishlist(ctx context.Context, arg CreateWishlistParams) (Wishlist, error) {
	row := q.db.QueryRowContext(ctx, createWishlist, arg.BooksID, arg.Username)
	var i Wishlist
	err := row.Scan(
		&i.ID,
		&i.BooksID,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const deleteWishlist = `-- name: DeleteWishlist :exec
DELETE FROM wishlists
WHERE id = $1
AND username = $2
`

type DeleteWishlistParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) DeleteWishlist(ctx context.Context, arg DeleteWishlistParams) error {
	_, err := q.db.ExecContext(ctx, deleteWishlist, arg.ID, arg.Username)
	return err
}

const getWishlist = `-- name: GetWishlist :one
SELECT id, books_id, username, created_at FROM wishlists
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWishlist(ctx context.Context, id int64) (Wishlist, error) {
	row := q.db.QueryRowContext(ctx, getWishlist, id)
	var i Wishlist
	err := row.Scan(
		&i.ID,
		&i.BooksID,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const listWishlistsByUsername = `-- name: ListWishlistsByUsername :many
SELECT id, books_id, username, created_at FROM wishlists
WHERE username = $1
ORDER BY id
`

func (q *Queries) ListWishlistsByUsername(ctx context.Context, username string) ([]Wishlist, error) {
	rows, err := q.db.QueryContext(ctx, listWishlistsByUsername, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Wishlist{}
	for rows.Next() {
		var i Wishlist
		if err := rows.Scan(
			&i.ID,
			&i.BooksID,
			&i.Username,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
