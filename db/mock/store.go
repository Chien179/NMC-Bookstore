// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Chien179/NMCBookstoreBE/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/Chien179/NMCBookstoreBE/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateAddress mocks base method.
func (m *MockStore) CreateAddress(arg0 context.Context, arg1 db.CreateAddressParams) (db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", arg0, arg1)
	ret0, _ := ret[0].(db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockStoreMockRecorder) CreateAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockStore)(nil).CreateAddress), arg0, arg1)
}

// CreateBook mocks base method.
func (m *MockStore) CreateBook(arg0 context.Context, arg1 db.CreateBookParams) (db.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", arg0, arg1)
	ret0, _ := ret[0].(db.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockStoreMockRecorder) CreateBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockStore)(nil).CreateBook), arg0, arg1)
}

// CreateBookGenre mocks base method.
func (m *MockStore) CreateBookGenre(arg0 context.Context, arg1 db.CreateBookGenreParams) (db.BooksGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookGenre", arg0, arg1)
	ret0, _ := ret[0].(db.BooksGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookGenre indicates an expected call of CreateBookGenre.
func (mr *MockStoreMockRecorder) CreateBookGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookGenre", reflect.TypeOf((*MockStore)(nil).CreateBookGenre), arg0, arg1)
}

// CreateBookSubgenre mocks base method.
func (m *MockStore) CreateBookSubgenre(arg0 context.Context, arg1 db.CreateBookSubgenreParams) (db.BooksSubgenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookSubgenre", arg0, arg1)
	ret0, _ := ret[0].(db.BooksSubgenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookSubgenre indicates an expected call of CreateBookSubgenre.
func (mr *MockStoreMockRecorder) CreateBookSubgenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookSubgenre", reflect.TypeOf((*MockStore)(nil).CreateBookSubgenre), arg0, arg1)
}

// CreateCart mocks base method.
func (m *MockStore) CreateCart(arg0 context.Context, arg1 db.CreateCartParams) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockStoreMockRecorder) CreateCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockStore)(nil).CreateCart), arg0, arg1)
}

// CreateGenre mocks base method.
func (m *MockStore) CreateGenre(arg0 context.Context, arg1 string) (db.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGenre", arg0, arg1)
	ret0, _ := ret[0].(db.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGenre indicates an expected call of CreateGenre.
func (mr *MockStoreMockRecorder) CreateGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGenre", reflect.TypeOf((*MockStore)(nil).CreateGenre), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(arg0 context.Context, arg1 string) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), arg0, arg1)
}

// CreateReview mocks base method.
func (m *MockStore) CreateReview(arg0 context.Context, arg1 db.CreateReviewParams) (db.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReview", arg0, arg1)
	ret0, _ := ret[0].(db.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReview indicates an expected call of CreateReview.
func (mr *MockStoreMockRecorder) CreateReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReview", reflect.TypeOf((*MockStore)(nil).CreateReview), arg0, arg1)
}

// CreateSubgenre mocks base method.
func (m *MockStore) CreateSubgenre(arg0 context.Context, arg1 db.CreateSubgenreParams) (db.Subgenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubgenre", arg0, arg1)
	ret0, _ := ret[0].(db.Subgenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubgenre indicates an expected call of CreateSubgenre.
func (mr *MockStoreMockRecorder) CreateSubgenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubgenre", reflect.TypeOf((*MockStore)(nil).CreateSubgenre), arg0, arg1)
}

// CreateTransaction mocks base method.
func (m *MockStore) CreateTransaction(arg0 context.Context, arg1 db.CreateTransactionParams) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStoreMockRecorder) CreateTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStore)(nil).CreateTransaction), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// CreateWishlist mocks base method.
func (m *MockStore) CreateWishlist(arg0 context.Context, arg1 db.CreateWishlistParams) (db.Wishlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWishlist", arg0, arg1)
	ret0, _ := ret[0].(db.Wishlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWishlist indicates an expected call of CreateWishlist.
func (mr *MockStoreMockRecorder) CreateWishlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWishlist", reflect.TypeOf((*MockStore)(nil).CreateWishlist), arg0, arg1)
}

// DeleteAddress mocks base method.
func (m *MockStore) DeleteAddress(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockStoreMockRecorder) DeleteAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockStore)(nil).DeleteAddress), arg0, arg1)
}

// DeleteBook mocks base method.
func (m *MockStore) DeleteBook(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook.
func (mr *MockStoreMockRecorder) DeleteBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockStore)(nil).DeleteBook), arg0, arg1)
}

// DeleteBookGenre mocks base method.
func (m *MockStore) DeleteBookGenre(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookGenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookGenre indicates an expected call of DeleteBookGenre.
func (mr *MockStoreMockRecorder) DeleteBookGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookGenre", reflect.TypeOf((*MockStore)(nil).DeleteBookGenre), arg0, arg1)
}

// DeleteBookSubgenre mocks base method.
func (m *MockStore) DeleteBookSubgenre(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookSubgenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookSubgenre indicates an expected call of DeleteBookSubgenre.
func (mr *MockStoreMockRecorder) DeleteBookSubgenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookSubgenre", reflect.TypeOf((*MockStore)(nil).DeleteBookSubgenre), arg0, arg1)
}

// DeleteCart mocks base method.
func (m *MockStore) DeleteCart(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCart", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCart indicates an expected call of DeleteCart.
func (mr *MockStoreMockRecorder) DeleteCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCart", reflect.TypeOf((*MockStore)(nil).DeleteCart), arg0, arg1)
}

// DeleteGenre mocks base method.
func (m *MockStore) DeleteGenre(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGenre indicates an expected call of DeleteGenre.
func (mr *MockStoreMockRecorder) DeleteGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGenre", reflect.TypeOf((*MockStore)(nil).DeleteGenre), arg0, arg1)
}

// DeleteOrder mocks base method.
func (m *MockStore) DeleteOrder(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockStoreMockRecorder) DeleteOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockStore)(nil).DeleteOrder), arg0, arg1)
}

// DeleteSubgenre mocks base method.
func (m *MockStore) DeleteSubgenre(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubgenre", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubgenre indicates an expected call of DeleteSubgenre.
func (mr *MockStoreMockRecorder) DeleteSubgenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubgenre", reflect.TypeOf((*MockStore)(nil).DeleteSubgenre), arg0, arg1)
}

// DeleteTransaction mocks base method.
func (m *MockStore) DeleteTransaction(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockStoreMockRecorder) DeleteTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockStore)(nil).DeleteTransaction), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DeleteWishlist mocks base method.
func (m *MockStore) DeleteWishlist(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWishlist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWishlist indicates an expected call of DeleteWishlist.
func (mr *MockStoreMockRecorder) DeleteWishlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWishlist", reflect.TypeOf((*MockStore)(nil).DeleteWishlist), arg0, arg1)
}

// GetAddress mocks base method.
func (m *MockStore) GetAddress(arg0 context.Context, arg1 int64) (db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", arg0, arg1)
	ret0, _ := ret[0].(db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockStoreMockRecorder) GetAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockStore)(nil).GetAddress), arg0, arg1)
}

// GetBook mocks base method.
func (m *MockStore) GetBook(arg0 context.Context, arg1 int64) (db.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", arg0, arg1)
	ret0, _ := ret[0].(db.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockStoreMockRecorder) GetBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockStore)(nil).GetBook), arg0, arg1)
}

// GetBookGenre mocks base method.
func (m *MockStore) GetBookGenre(arg0 context.Context, arg1 int64) (db.BooksGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookGenre", arg0, arg1)
	ret0, _ := ret[0].(db.BooksGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookGenre indicates an expected call of GetBookGenre.
func (mr *MockStoreMockRecorder) GetBookGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookGenre", reflect.TypeOf((*MockStore)(nil).GetBookGenre), arg0, arg1)
}

// GetBookSubgenre mocks base method.
func (m *MockStore) GetBookSubgenre(arg0 context.Context, arg1 int64) (db.BooksSubgenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookSubgenre", arg0, arg1)
	ret0, _ := ret[0].(db.BooksSubgenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookSubgenre indicates an expected call of GetBookSubgenre.
func (mr *MockStoreMockRecorder) GetBookSubgenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookSubgenre", reflect.TypeOf((*MockStore)(nil).GetBookSubgenre), arg0, arg1)
}

// GetCart mocks base method.
func (m *MockStore) GetCart(arg0 context.Context, arg1 int64) (db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", arg0, arg1)
	ret0, _ := ret[0].(db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockStoreMockRecorder) GetCart(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockStore)(nil).GetCart), arg0, arg1)
}

// GetGenre mocks base method.
func (m *MockStore) GetGenre(arg0 context.Context, arg1 int64) (db.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGenre", arg0, arg1)
	ret0, _ := ret[0].(db.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGenre indicates an expected call of GetGenre.
func (mr *MockStoreMockRecorder) GetGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGenre", reflect.TypeOf((*MockStore)(nil).GetGenre), arg0, arg1)
}

// GetOrder mocks base method.
func (m *MockStore) GetOrder(arg0 context.Context, arg1 int64) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStoreMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStore)(nil).GetOrder), arg0, arg1)
}

// GetReview mocks base method.
func (m *MockStore) GetReview(arg0 context.Context, arg1 int64) (db.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReview", arg0, arg1)
	ret0, _ := ret[0].(db.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReview indicates an expected call of GetReview.
func (mr *MockStoreMockRecorder) GetReview(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReview", reflect.TypeOf((*MockStore)(nil).GetReview), arg0, arg1)
}

// GetSubgenre mocks base method.
func (m *MockStore) GetSubgenre(arg0 context.Context, arg1 int64) (db.Subgenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubgenre", arg0, arg1)
	ret0, _ := ret[0].(db.Subgenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubgenre indicates an expected call of GetSubgenre.
func (mr *MockStoreMockRecorder) GetSubgenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubgenre", reflect.TypeOf((*MockStore)(nil).GetSubgenre), arg0, arg1)
}

// GetTransaction mocks base method.
func (m *MockStore) GetTransaction(arg0 context.Context, arg1 int64) (db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", arg0, arg1)
	ret0, _ := ret[0].(db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockStoreMockRecorder) GetTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockStore)(nil).GetTransaction), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetWishlist mocks base method.
func (m *MockStore) GetWishlist(arg0 context.Context, arg1 int64) (db.Wishlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWishlist", arg0, arg1)
	ret0, _ := ret[0].(db.Wishlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWishlist indicates an expected call of GetWishlist.
func (mr *MockStoreMockRecorder) GetWishlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWishlist", reflect.TypeOf((*MockStore)(nil).GetWishlist), arg0, arg1)
}

// ListAddresses mocks base method.
func (m *MockStore) ListAddresses(arg0 context.Context, arg1 db.ListAddressesParams) ([]db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddresses", arg0, arg1)
	ret0, _ := ret[0].([]db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddresses indicates an expected call of ListAddresses.
func (mr *MockStoreMockRecorder) ListAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddresses", reflect.TypeOf((*MockStore)(nil).ListAddresses), arg0, arg1)
}

// ListBooks mocks base method.
func (m *MockStore) ListBooks(arg0 context.Context, arg1 db.ListBooksParams) ([]db.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooks", arg0, arg1)
	ret0, _ := ret[0].([]db.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooks indicates an expected call of ListBooks.
func (mr *MockStoreMockRecorder) ListBooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooks", reflect.TypeOf((*MockStore)(nil).ListBooks), arg0, arg1)
}

// ListBooksGenresByBookID mocks base method.
func (m *MockStore) ListBooksGenresByBookID(arg0 context.Context, arg1 int64) ([]db.BooksGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooksGenresByBookID", arg0, arg1)
	ret0, _ := ret[0].([]db.BooksGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooksGenresByBookID indicates an expected call of ListBooksGenresByBookID.
func (mr *MockStoreMockRecorder) ListBooksGenresByBookID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooksGenresByBookID", reflect.TypeOf((*MockStore)(nil).ListBooksGenresByBookID), arg0, arg1)
}

// ListBooksGenresByGenreID mocks base method.
func (m *MockStore) ListBooksGenresByGenreID(arg0 context.Context, arg1 int64) ([]db.BooksGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooksGenresByGenreID", arg0, arg1)
	ret0, _ := ret[0].([]db.BooksGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooksGenresByGenreID indicates an expected call of ListBooksGenresByGenreID.
func (mr *MockStoreMockRecorder) ListBooksGenresByGenreID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooksGenresByGenreID", reflect.TypeOf((*MockStore)(nil).ListBooksGenresByGenreID), arg0, arg1)
}

// ListBooksSubgenresByBookID mocks base method.
func (m *MockStore) ListBooksSubgenresByBookID(arg0 context.Context, arg1 int64) ([]db.BooksSubgenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooksSubgenresByBookID", arg0, arg1)
	ret0, _ := ret[0].([]db.BooksSubgenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooksSubgenresByBookID indicates an expected call of ListBooksSubgenresByBookID.
func (mr *MockStoreMockRecorder) ListBooksSubgenresByBookID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooksSubgenresByBookID", reflect.TypeOf((*MockStore)(nil).ListBooksSubgenresByBookID), arg0, arg1)
}

// ListBooksSubgenresBySubgenreID mocks base method.
func (m *MockStore) ListBooksSubgenresBySubgenreID(arg0 context.Context, arg1 int64) ([]db.BooksSubgenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBooksSubgenresBySubgenreID", arg0, arg1)
	ret0, _ := ret[0].([]db.BooksSubgenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBooksSubgenresBySubgenreID indicates an expected call of ListBooksSubgenresBySubgenreID.
func (mr *MockStoreMockRecorder) ListBooksSubgenresBySubgenreID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBooksSubgenresBySubgenreID", reflect.TypeOf((*MockStore)(nil).ListBooksSubgenresBySubgenreID), arg0, arg1)
}

// ListCartsByUsername mocks base method.
func (m *MockStore) ListCartsByUsername(arg0 context.Context, arg1 string) ([]db.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCartsByUsername", arg0, arg1)
	ret0, _ := ret[0].([]db.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCartsByUsername indicates an expected call of ListCartsByUsername.
func (mr *MockStoreMockRecorder) ListCartsByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCartsByUsername", reflect.TypeOf((*MockStore)(nil).ListCartsByUsername), arg0, arg1)
}

// ListGenres mocks base method.
func (m *MockStore) ListGenres(arg0 context.Context) ([]db.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGenres", arg0)
	ret0, _ := ret[0].([]db.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGenres indicates an expected call of ListGenres.
func (mr *MockStoreMockRecorder) ListGenres(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGenres", reflect.TypeOf((*MockStore)(nil).ListGenres), arg0)
}

// ListOdersByUserName mocks base method.
func (m *MockStore) ListOdersByUserName(arg0 context.Context, arg1 db.ListOdersByUserNameParams) ([]db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOdersByUserName", arg0, arg1)
	ret0, _ := ret[0].([]db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOdersByUserName indicates an expected call of ListOdersByUserName.
func (mr *MockStoreMockRecorder) ListOdersByUserName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOdersByUserName", reflect.TypeOf((*MockStore)(nil).ListOdersByUserName), arg0, arg1)
}

// ListReviewsByBookID mocks base method.
func (m *MockStore) ListReviewsByBookID(arg0 context.Context, arg1 db.ListReviewsByBookIDParams) ([]db.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReviewsByBookID", arg0, arg1)
	ret0, _ := ret[0].([]db.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReviewsByBookID indicates an expected call of ListReviewsByBookID.
func (mr *MockStoreMockRecorder) ListReviewsByBookID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReviewsByBookID", reflect.TypeOf((*MockStore)(nil).ListReviewsByBookID), arg0, arg1)
}

// ListSubgenres mocks base method.
func (m *MockStore) ListSubgenres(arg0 context.Context) ([]db.Subgenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubgenres", arg0)
	ret0, _ := ret[0].([]db.Subgenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubgenres indicates an expected call of ListSubgenres.
func (mr *MockStoreMockRecorder) ListSubgenres(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubgenres", reflect.TypeOf((*MockStore)(nil).ListSubgenres), arg0)
}

// ListTransactionsByOrderID mocks base method.
func (m *MockStore) ListTransactionsByOrderID(arg0 context.Context, arg1 int64) ([]db.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactionsByOrderID", arg0, arg1)
	ret0, _ := ret[0].([]db.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTransactionsByOrderID indicates an expected call of ListTransactionsByOrderID.
func (mr *MockStoreMockRecorder) ListTransactionsByOrderID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactionsByOrderID", reflect.TypeOf((*MockStore)(nil).ListTransactionsByOrderID), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// ListWishlistsByUsername mocks base method.
func (m *MockStore) ListWishlistsByUsername(arg0 context.Context, arg1 string) ([]db.Wishlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListWishlistsByUsername", arg0, arg1)
	ret0, _ := ret[0].([]db.Wishlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWishlistsByUsername indicates an expected call of ListWishlistsByUsername.
func (mr *MockStoreMockRecorder) ListWishlistsByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWishlistsByUsername", reflect.TypeOf((*MockStore)(nil).ListWishlistsByUsername), arg0, arg1)
}

// UpdateAddress mocks base method.
func (m *MockStore) UpdateAddress(arg0 context.Context, arg1 db.UpdateAddressParams) (db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", arg0, arg1)
	ret0, _ := ret[0].(db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockStoreMockRecorder) UpdateAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockStore)(nil).UpdateAddress), arg0, arg1)
}

// UpdateBook mocks base method.
func (m *MockStore) UpdateBook(arg0 context.Context, arg1 db.UpdateBookParams) (db.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0, arg1)
	ret0, _ := ret[0].(db.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockStoreMockRecorder) UpdateBook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockStore)(nil).UpdateBook), arg0, arg1)
}

// UpdateGenre mocks base method.
func (m *MockStore) UpdateGenre(arg0 context.Context, arg1 db.UpdateGenreParams) (db.Genre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGenre", arg0, arg1)
	ret0, _ := ret[0].(db.Genre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGenre indicates an expected call of UpdateGenre.
func (mr *MockStoreMockRecorder) UpdateGenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGenre", reflect.TypeOf((*MockStore)(nil).UpdateGenre), arg0, arg1)
}

// UpdatePassword mocks base method.
func (m *MockStore) UpdatePassword(arg0 context.Context, arg1 db.UpdatePasswordParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockStoreMockRecorder) UpdatePassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockStore)(nil).UpdatePassword), arg0, arg1)
}

// UpdateSubgenre mocks base method.
func (m *MockStore) UpdateSubgenre(arg0 context.Context, arg1 db.UpdateSubgenreParams) (db.Subgenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubgenre", arg0, arg1)
	ret0, _ := ret[0].(db.Subgenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubgenre indicates an expected call of UpdateSubgenre.
func (mr *MockStoreMockRecorder) UpdateSubgenre(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubgenre", reflect.TypeOf((*MockStore)(nil).UpdateSubgenre), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}
