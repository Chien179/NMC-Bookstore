// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: address.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createAddress = `-- name: CreateAddress :one
INSERT INTO address (
  username,
  address,
  district,
  city
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, address, username, district, city, created_at
`

type CreateAddressParams struct {
	Username string `json:"username"`
	Address  string `json:"address"`
	District string `json:"district"`
	City     string `json:"city"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddress,
		arg.Username,
		arg.Address,
		arg.District,
		arg.City,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.Username,
		&i.District,
		&i.City,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM address
WHERE id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAddress, id)
	return err
}

const getAddress = `-- name: GetAddress :one
SELECT id, address, username, district, city, created_at FROM address
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAddress(ctx context.Context, id int64) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddress, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.Username,
		&i.District,
		&i.City,
		&i.CreatedAt,
	)
	return i, err
}

const listAddresses = `-- name: ListAddresses :one
(SELECT t.total_page, JSON_AGG(json_build_object
    ('id',id,
    'address',address,
    'username',username,
    'district',district,
    'city',city,
    'created_at',created_at)
    ) AS addresses
	FROM (
      SELECT 
        CEILING(CAST(COUNT(id) OVER () AS FLOAT)/$2) AS total_page, id, address, username, district, city, created_at 
      FROM address
      WHERE address.username = $1
      ORDER BY id
      LIMIT $2
      OFFSET $3
    ) AS t
    GROUP BY t.total_page)
`

type ListAddressesParams struct {
	Username string `json:"username"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

type ListAddressesRow struct {
	TotalPage float64         `json:"total_page"`
	Addresses json.RawMessage `json:"addresses"`
}

func (q *Queries) ListAddresses(ctx context.Context, arg ListAddressesParams) (ListAddressesRow, error) {
	row := q.db.QueryRowContext(ctx, listAddresses, arg.Username, arg.Limit, arg.Offset)
	var i ListAddressesRow
	err := row.Scan(&i.TotalPage, &i.Addresses)
	return i, err
}

const updateAddress = `-- name: UpdateAddress :one
UPDATE address
SET  address = COALESCE($1, address),
  district = COALESCE($2, district),
  city = COALESCE($3, city)
WHERE id = $4
RETURNING id, address, username, district, city, created_at
`

type UpdateAddressParams struct {
	Address  sql.NullString `json:"address"`
	District sql.NullString `json:"district"`
	City     sql.NullString `json:"city"`
	ID       int64          `json:"id"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, updateAddress,
		arg.Address,
		arg.District,
		arg.City,
		arg.ID,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.Username,
		&i.District,
		&i.City,
		&i.CreatedAt,
	)
	return i, err
}
