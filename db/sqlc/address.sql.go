// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: address.sql

package db

import (
	"context"
)

const createAddres = `-- name: CreateAddres :one
INSERT INTO address (
  users_id,
  address,
  district,
  city
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, address, users_id, district, city
`

type CreateAddresParams struct {
	UsersID  int64  `json:"users_id"`
	Address  string `json:"address"`
	District string `json:"district"`
	City     string `json:"city"`
}

func (q *Queries) CreateAddres(ctx context.Context, arg CreateAddresParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, createAddres,
		arg.UsersID,
		arg.Address,
		arg.District,
		arg.City,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.UsersID,
		&i.District,
		&i.City,
	)
	return i, err
}

const deleteAddres = `-- name: DeleteAddres :exec
DELETE FROM address
WHERE id = $1
`

func (q *Queries) DeleteAddres(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAddres, id)
	return err
}

const getAddres = `-- name: GetAddres :one
SELECT id, address, users_id, district, city FROM address
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAddres(ctx context.Context, id int64) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddres, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.UsersID,
		&i.District,
		&i.City,
	)
	return i, err
}

const listAddress = `-- name: ListAddress :many
SELECT id, address, users_id, district, city FROM address
ORDER BY id
`

func (q *Queries) ListAddress(ctx context.Context) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, listAddress)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Address{}
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.Address,
			&i.UsersID,
			&i.District,
			&i.City,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAddres = `-- name: UpdateAddres :one
UPDATE address
SET  address = $2,
  district = $3,
  city = $4
WHERE id = $1
RETURNING id, address, users_id, district, city
`

type UpdateAddresParams struct {
	ID       int64  `json:"id"`
	Address  string `json:"address"`
	District string `json:"district"`
	City     string `json:"city"`
}

func (q *Queries) UpdateAddres(ctx context.Context, arg UpdateAddresParams) (Address, error) {
	row := q.db.QueryRowContext(ctx, updateAddres,
		arg.ID,
		arg.Address,
		arg.District,
		arg.City,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.Address,
		&i.UsersID,
		&i.District,
		&i.City,
	)
	return i, err
}
