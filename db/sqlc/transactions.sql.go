// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: transactions.sql

package db

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    orders_id,
    books_id,
    amount,
    total
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, orders_id, books_id, created_at, amount, total, reviewed
`

type CreateTransactionParams struct {
	OrdersID int64   `json:"orders_id"`
	BooksID  int64   `json:"books_id"`
	Amount   int32   `json:"amount"`
	Total    float64 `json:"total"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.OrdersID,
		arg.BooksID,
		arg.Amount,
		arg.Total,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.OrdersID,
		&i.BooksID,
		&i.CreatedAt,
		&i.Amount,
		&i.Total,
		&i.Reviewed,
	)
	return i, err
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, orders_id, books_id, created_at, amount, total, reviewed FROM transactions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.OrdersID,
		&i.BooksID,
		&i.CreatedAt,
		&i.Amount,
		&i.Total,
		&i.Reviewed,
	)
	return i, err
}

const listTransactionsByOrderID = `-- name: ListTransactionsByOrderID :many
SELECT id, orders_id, books_id, created_at, amount, total, reviewed FROM transactions
WHERE orders_id = $1
ORDER BY id
`

func (q *Queries) ListTransactionsByOrderID(ctx context.Context, ordersID int64) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByOrderID, ordersID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.OrdersID,
			&i.BooksID,
			&i.CreatedAt,
			&i.Amount,
			&i.Total,
			&i.Reviewed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransaction = `-- name: UpdateTransaction :one
UPDATE transactions
SET reviewed = true
WHERE id = $1
RETURNING id, orders_id, books_id, created_at, amount, total, reviewed
`

func (q *Queries) UpdateTransaction(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.OrdersID,
		&i.BooksID,
		&i.CreatedAt,
		&i.Amount,
		&i.Total,
		&i.Reviewed,
	)
	return i, err
}
