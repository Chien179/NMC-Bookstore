// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: books_subgenres.sql

package db

import (
	"context"
)

const createBookSubgenre = `-- name: CreateBookSubgenre :one
INSERT INTO books_subgenres (
  books_id,
  subgenres_id
) VALUES (
  $1, $2
)
RETURNING id, books_id, subgenres_id, created_at
`

type CreateBookSubgenreParams struct {
	BooksID     int64 `json:"books_id"`
	SubgenresID int64 `json:"subgenres_id"`
}

func (q *Queries) CreateBookSubgenre(ctx context.Context, arg CreateBookSubgenreParams) (BooksSubgenre, error) {
	row := q.db.QueryRowContext(ctx, createBookSubgenre, arg.BooksID, arg.SubgenresID)
	var i BooksSubgenre
	err := row.Scan(
		&i.ID,
		&i.BooksID,
		&i.SubgenresID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBookSubgenreByBooksID = `-- name: DeleteBookSubgenreByBooksID :exec
DELETE FROM books_subgenres
WHERE books_id = $1
`

func (q *Queries) DeleteBookSubgenreByBooksID(ctx context.Context, booksID int64) error {
	_, err := q.db.ExecContext(ctx, deleteBookSubgenreByBooksID, booksID)
	return err
}

const getBookSubgenre = `-- name: GetBookSubgenre :one
SELECT id, books_id, subgenres_id, created_at FROM books_subgenres
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBookSubgenre(ctx context.Context, id int64) (BooksSubgenre, error) {
	row := q.db.QueryRowContext(ctx, getBookSubgenre, id)
	var i BooksSubgenre
	err := row.Scan(
		&i.ID,
		&i.BooksID,
		&i.SubgenresID,
		&i.CreatedAt,
	)
	return i, err
}

const listBooksSubgenresByBookID = `-- name: ListBooksSubgenresByBookID :many
SELECT id, books_id, subgenres_id, created_at FROM books_subgenres
WHERE books_id = $1
ORDER BY id
`

func (q *Queries) ListBooksSubgenresByBookID(ctx context.Context, booksID int64) ([]BooksSubgenre, error) {
	rows, err := q.db.QueryContext(ctx, listBooksSubgenresByBookID, booksID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BooksSubgenre{}
	for rows.Next() {
		var i BooksSubgenre
		if err := rows.Scan(
			&i.ID,
			&i.BooksID,
			&i.SubgenresID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBooksSubgenresBySubgenreID = `-- name: ListBooksSubgenresBySubgenreID :many
SELECT id, books_id, subgenres_id, created_at FROM books_subgenres
WHERE subgenres_id = $1
ORDER BY id
`

func (q *Queries) ListBooksSubgenresBySubgenreID(ctx context.Context, subgenresID int64) ([]BooksSubgenre, error) {
	rows, err := q.db.QueryContext(ctx, listBooksSubgenresBySubgenreID, subgenresID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BooksSubgenre{}
	for rows.Next() {
		var i BooksSubgenre
		if err := rows.Scan(
			&i.ID,
			&i.BooksID,
			&i.SubgenresID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBooksSubgenresIDByBookID = `-- name: ListBooksSubgenresIDByBookID :many
SELECT subgenres_id FROM books_subgenres
WHERE books_id = $1
ORDER BY id
`

func (q *Queries) ListBooksSubgenresIDByBookID(ctx context.Context, booksID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listBooksSubgenresIDByBookID, booksID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var subgenres_id int64
		if err := rows.Scan(&subgenres_id); err != nil {
			return nil, err
		}
		items = append(items, subgenres_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
