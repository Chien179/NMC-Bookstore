// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: books_genres.sql

package db

import (
	"context"
)

const createBookGenre = `-- name: CreateBookGenre :one
INSERT INTO books_genres (
  books_id,
  genres_id
) VALUES (
  $1, $2
)
RETURNING id, books_id, genres_id, created_at
`

type CreateBookGenreParams struct {
	BooksID  int64 `json:"books_id"`
	GenresID int64 `json:"genres_id"`
}

func (q *Queries) CreateBookGenre(ctx context.Context, arg CreateBookGenreParams) (BooksGenre, error) {
	row := q.db.QueryRowContext(ctx, createBookGenre, arg.BooksID, arg.GenresID)
	var i BooksGenre
	err := row.Scan(
		&i.ID,
		&i.BooksID,
		&i.GenresID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBookGenre = `-- name: DeleteBookGenre :exec
DELETE FROM books_genres
WHERE id = $1
`

func (q *Queries) DeleteBookGenre(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBookGenre, id)
	return err
}

const getBookGenre = `-- name: GetBookGenre :one
SELECT id, books_id, genres_id, created_at FROM books_genres
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetBookGenre(ctx context.Context, id int64) (BooksGenre, error) {
	row := q.db.QueryRowContext(ctx, getBookGenre, id)
	var i BooksGenre
	err := row.Scan(
		&i.ID,
		&i.BooksID,
		&i.GenresID,
		&i.CreatedAt,
	)
	return i, err
}

const listBooksGenresByBookID = `-- name: ListBooksGenresByBookID :many
SELECT id, books_id, genres_id, created_at FROM books_genres
WHERE books_id = $1
ORDER BY id
`

func (q *Queries) ListBooksGenresByBookID(ctx context.Context, booksID int64) ([]BooksGenre, error) {
	rows, err := q.db.QueryContext(ctx, listBooksGenresByBookID, booksID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BooksGenre{}
	for rows.Next() {
		var i BooksGenre
		if err := rows.Scan(
			&i.ID,
			&i.BooksID,
			&i.GenresID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBooksGenresByGenreID = `-- name: ListBooksGenresByGenreID :many
SELECT id, books_id, genres_id, created_at FROM books_genres
WHERE genres_id = $1
ORDER BY id
`

func (q *Queries) ListBooksGenresByGenreID(ctx context.Context, genresID int64) ([]BooksGenre, error) {
	rows, err := q.db.QueryContext(ctx, listBooksGenresByGenreID, genresID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []BooksGenre{}
	for rows.Next() {
		var i BooksGenre
		if err := rows.Scan(
			&i.ID,
			&i.BooksID,
			&i.GenresID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
