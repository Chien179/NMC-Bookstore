// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: reviews.sql

package db

import (
	"context"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (
    username,
    books_id,
    comments,
    rating
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, username, books_id, comments, rating, created_at
`

type CreateReviewParams struct {
	Username string `json:"username"`
	BooksID  int64  `json:"books_id"`
	Comments string `json:"comments"`
	Rating   int32  `json:"rating"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.Username,
		arg.BooksID,
		arg.Comments,
		arg.Rating,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.BooksID,
		&i.Comments,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReview, id)
	return err
}

const getReview = `-- name: GetReview :one
SELECT id, username, books_id, comments, rating, created_at FROM reviews
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReview(ctx context.Context, id int64) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReview, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.BooksID,
		&i.Comments,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const listReviewsByBookID = `-- name: ListReviewsByBookID :many
SELECT id, username, books_id, comments, rating, created_at FROM reviews
WHERE books_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListReviewsByBookIDParams struct {
	BooksID int64 `json:"books_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) ListReviewsByBookID(ctx context.Context, arg ListReviewsByBookIDParams) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, listReviewsByBookID, arg.BooksID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Review{}
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.BooksID,
			&i.Comments,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
