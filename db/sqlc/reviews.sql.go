// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: reviews.sql

package db

import (
	"context"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (
    users_id,
    books_id,
    comments,
    rating
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, users_id, books_id, comments, rating
`

type CreateReviewParams struct {
	UsersID  int64  `json:"users_id"`
	BooksID  int64  `json:"books_id"`
	Comments string `json:"comments"`
	Rating   int32  `json:"rating"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.UsersID,
		arg.BooksID,
		arg.Comments,
		arg.Rating,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UsersID,
		&i.BooksID,
		&i.Comments,
		&i.Rating,
	)
	return i, err
}

const getReviewsByBookID = `-- name: GetReviewsByBookID :many
SELECT id, users_id, books_id, comments, rating FROM reviews
WHERE books_id = $1
ORDER BY id
`

func (q *Queries) GetReviewsByBookID(ctx context.Context, booksID int64) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, getReviewsByBookID, booksID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Review{}
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UsersID,
			&i.BooksID,
			&i.Comments,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
