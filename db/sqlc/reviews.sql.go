// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: reviews.sql

package db

import (
	"context"
	"encoding/json"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (
    username,
    books_id,
    comments,
    rating
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, username, books_id, comments, rating, created_at
`

type CreateReviewParams struct {
	Username string `json:"username"`
	BooksID  int64  `json:"books_id"`
	Comments string `json:"comments"`
	Rating   int32  `json:"rating"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.Username,
		arg.BooksID,
		arg.Comments,
		arg.Rating,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.BooksID,
		&i.Comments,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReview, id)
	return err
}

const getReview = `-- name: GetReview :one
SELECT id, username, books_id, comments, rating, created_at FROM reviews
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetReview(ctx context.Context, id int64) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReview, id)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.BooksID,
		&i.Comments,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const listReviewsByBookID = `-- name: ListReviewsByBookID :one
SELECT
  (SELECT (COUNT(*)/$2)
     FROM reviews
     WHERE reviews.books_id = $1) 
     as total_page, 
    (SELECT JSON_AGG(t.*) FROM (
      SELECT id, username, books_id, comments, rating, created_at FROM reviews
      WHERE reviews.books_id = $1
      ORDER BY id
      LIMIT $2
      OFFSET $3
    )AS t) AS reviews
`

type ListReviewsByBookIDParams struct {
	BooksID int64       `json:"books_id"`
	Limit   interface{} `json:"limit"`
	Offset  int32       `json:"offset"`
}

type ListReviewsByBookIDRow struct {
	TotalPage int32           `json:"total_page"`
	Reviews   json.RawMessage `json:"reviews"`
}

func (q *Queries) ListReviewsByBookID(ctx context.Context, arg ListReviewsByBookIDParams) (ListReviewsByBookIDRow, error) {
	row := q.db.QueryRowContext(ctx, listReviewsByBookID, arg.BooksID, arg.Limit, arg.Offset)
	var i ListReviewsByBookIDRow
	err := row.Scan(&i.TotalPage, &i.Reviews)
	return i, err
}
